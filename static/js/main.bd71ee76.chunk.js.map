{"version":3,"sources":["components/Form.js","components/Song.js","components/Info.js","App.js","reportWebVitals.js","index.js"],"names":["Form","setLyricsSearch","useState","artist","song","search","setSearch","error","setError","updateState","e","target","name","value","className","onSubmit","preventDefault","trim","type","placeholder","onChange","Song","lyrics","length","Info","info","Object","keys","strArtistThumb","strGenre","strBiographyEN","src","alt","href","strFacebook","rel","strTwitter","strLastFMChart","App","lyricsSearch","setLyrics","setInfo","useEffect","a","url","url2","Promise","all","axios","information","console","log","data","artists","callLyricsAPI","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd71ee76.chunk.js","sourcesContent":["import React, {useState} from \"react\"\nimport PropTypes from \"prop-types\"\n\n\nconst Form = ({setLyricsSearch}) => {\n\n    const [search, setSearch] = useState({\n        artist: \"\",\n        song: \"\",\n    })\n    const [error, setError] = useState(false)\n\n    const {artist, song} = search\n\n    // Function for every input to read it's content\n    const updateState = e => {\n        setSearch({\n            ...search,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    // Call APIs\n    const handleSubmit = e => {\n        e.preventDefault()\n\n        if(artist.trim() === \"\" || song.trim() === \"\") {\n            setError(true)\n            return\n        } \n        setError(false)\n        \n        // Send data to main Component\n        setLyricsSearch(search)\n    }\n\n    return ( \n        <div className=\"bg-info\">\n            {error ? <p className=\"alert alert-danger text-center p-2\">All Fields are Mandatory</p> : null}\n            <div className=\"container\">\n                <div className=\"row\">\n                    <form\n                        onSubmit={handleSubmit}\n                        className=\"col card text-white bg-transparent mb-5 pt-5 pb-2\"\n                    >\n                        <fieldset>\n                            <legend className=\"text-center\">Song Lyrics Browser</legend>\n                            <div className=\"row\">\n\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label>Artist</label>\n                                        <input\n                                            type=\"text\"\n                                            className=\"form-control\"\n                                            name=\"artist\"\n                                            placeholder=\"Artist's Name\"\n                                            onChange={updateState}\n                                            value={artist}\n                                        />\n                                    </div>\n                                </div>\n\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label>Song</label>\n                                        <input\n                                            type=\"text\"\n                                            className=\"form-control\"\n                                            name=\"song\"\n                                            placeholder=\"Song's Name\"\n                                            onChange={updateState}\n                                            value={song}\n                                        />\n                                    </div>\n                                </div>\n\n                            </div>\n                            <button type=\"submit\"\n                                type=\"submit\"\n                                className=\"btn btn-primary float-right\"\n                            >Search</button>\n                        </fieldset>\n                    </form>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nForm.propTypes = {\n    setLyricsSearch: PropTypes.func.isRequired\n}\n \nexport default Form","import React, {Fragment} from \"react\"\nimport PropTypes from \"prop-types\"\n\n\nconst Song = ({lyrics}) => {\n    if(lyrics.length === 0) return null\n\n    return (\n        <Fragment>\n            <h2>Lyrics</h2>\n            <p className=\"lyrics\">{lyrics}</p>\n        </Fragment>\n    )\n}\n\nSong.propTypes = {\n    lyrics: PropTypes.string.isRequired\n}\n \nexport default Song","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\n\nconst Info = ({info}) => {\n\n    if(Object.keys(info).length === 0) return null\n\n    const {strArtistThumb, strGenre, strBiographyEN } = info\n\n    return (\n        <div className=\"card border-ligth\">\n            <div className=\"card-header bg-primary text-light font-weigth-bold\">\n                Artist Information\n            </div>\n            <div className=\"card-body\">\n                <img src={strArtistThumb} alt=\"Artist Logo\" />\n                <p className=\"card-text\">Genre: {strGenre}</p>\n                <h2 className=\"card-text\">Biography:</h2>\n                <p className=\"card-text\">{strBiographyEN}</p>\n                <p className=\"card-text\">\n                    <a href={`https://${info.strFacebook}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                        <i className=\"fab fa-facebook\"></i>\n                    </a>\n                    <a href={`https://${info.strTwitter}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                        <i className=\"fab fa-twitter\"></i>\n                    </a>\n                    <a href={`${info.strLastFMChart}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                        <i className=\"fab fa-lastfm\"></i>\n                    </a>\n                </p>\n            </div>\n        </div>\n    )\n}\n\nInfo.propTypes = {\n    info: PropTypes.object.isRequired\n}\n \nexport default Info","import React, {Fragment, useState, useEffect} from \"react\"\nimport Form from \"./components/Form\"\nimport Song from \"./components/Song\"\nimport Info from \"./components/Info\"\nimport axios from \"axios\"\n\n\nfunction App() {\n\n  // Define State\n  const [lyricsSearch, setLyricsSearch] = useState({})\n  const [lyrics, setLyrics] = useState(\"\")\n  const [info, setInfo] = useState({})\n\n  useEffect(() => {\n    if(Object.keys(lyricsSearch).length === 0) return\n\n    const callLyricsAPI = async () => {\n      const {artist, song} = lyricsSearch\n      const url = `https://api.lyrics.ovh/v1/${artist}/${song}`\n      const url2 = `https://theaudiodb.com/api/v1/json/1/search.php?s=${artist}`\n\n      const [lyrics, information] = await Promise.all([\n        axios(url),\n        axios(url2)\n      ])\n\n      console.log(lyrics.data)\n\n      setLyrics(lyrics.data.lyrics)\n      setInfo(information.data.artists[0])\n\n    }\n    callLyricsAPI()\n  }, [lyricsSearch])\n\n  return (\n    <Fragment>\n      <Form \n        setLyricsSearch={setLyricsSearch}\n      />\n      <div className=\"container mt-5\">\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <Info \n              info={info}\n            />\n\n          </div>\n          <div className=\"col-md-6\">\n            <Song \n              lyrics={lyrics}\n            />\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}